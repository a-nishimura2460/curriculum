■ 開発
[ウォーターフォール開発]
	上流工程から下流工程へ順次移行していく開発手法。要求定義→外部設計（概要設計）→内部設計（詳細設計）→開発（プログラミング）→テスト→運用　の順番に各工程を完了していく。


[アジャイル開発]
	イテレーションと呼ばれれる、1〜4週間程度の早い期間で一つの機能を開発・リリースしていくこと。


[マイグレーション]
	ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすること。


[デグレーション]
	デグレードから派生した用語。新しいバージョンのものが、以前より悪い状態になること。新しいファイルなどを古い内容で上書きしてしまい、更新内容が失われることを指す場合もある。


[デプロイ]
	プログラムなどを使える状態にすること


[コンフリクト]
	複数のプログラムなどが競合状態になってしまうこと


[環境]
	構成や設定のこと

	〈開発環境（ローカル）〉
	個人のコンピューター内に構築された、開発中のシステムを動作させる環境。

	〈検証環境（ステージング）〉
	システムを公開する前に、本番と同様の環境で動作や表示などの最終確認を行う環境。

	〈本番環境〉
	システムが製品として実際に稼動している環境


[設計書／仕様書]
	設計書はどうやって作るかの記載をしたもの。仕様書はどんなものができるかの記載をしたもの。

	〈要件定義〉
	実装すべき機能や満たすべき性能などを明確にしていく作業

	〈基本設計書〉
	ソフトウェアの動きを外から見た際にどういう動きをするのか？(What)を決めたもの

	〈詳細設計書〉
	基本設計で決められた動きをどうやって実現するか？(How)を決めたもの


[テスト]
	〈単体テスト（UT→Unit Test）〉
	1つの「関数」「モジュール」が正常に動作するかのテスト

	〈結合テスト（CT／IT→Combined Test/Integration Test）〉
	複数の「関数」「モジュール」を組み合わせて、正常に動作するかのテスト

	〈総合テスト（ST→System Test）〉
	実際の運用形態に沿ってのテスト。


[エビデンス／証跡]
	テスト工程などで、システムが正しく動作している、あるいは不具合が生じたことを示す証拠となる書類やデータのこと


[データパッチ]
	プログラムの一部分を更新してバグ修正や機能変更を行うこと


[Access]
	Microsoft社が開発し提供しているデータベース管理ソフト


[マクロ]
	コンピュータの操作を自動化する技術

	〈VBA (Visual Basic for Applications)〉
	Microsoftが使用しているマクロを実行するために必要なプログラミング言語


[GAS（Google Apps Script）]
	Googleが提供しているWebアプリのプログラミング言語


[API (Application Programming Interface)]
	アプリケーションをプログラミングするためのインターフェイス

	〈WEB API〉
	WebサーバーまたはWebブラウザー用のインターフェイス

	〈REST API (REpresentational State Transfer API)〉
	HTTPメソッドを使い分けて設計するインターフェイス

	〈SOAP〉
	異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための通信プロトコル（規約）の一つ。


[Ajax(Asynchronous JavaScript + XML)]
	JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと

	〈XML (Extensible Markup Language)〉
	タグが自由に設定でき、そのタグに意味づけすることができるマークアップ言語

	〈JSON (JavaScript Object Notation)〉
	JavaScriptのようなオブジェクト表記構文のデータフォーマット

	〈ステータスコード〉
	HTMLを表示する前にブラウザが受信する3桁の番号

	〈クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）〉
	クロスオリジンは別のドメインからのアクセスを制限するもの。任意の別ドメインを許可するためのリクエストがCORS。


[バリデーション]
	対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証すること


[データ連携]
	異なるアプリケーションやシステムをまたいでデータを共有、活用するために、それぞれの言葉や解釈の垣根を取り払うプロセス

	〈Daemon〉
	UNIX系OSでメインメモリ上に常駐しているバックグラウンドプロセス

	〈CRON〉
	利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるデーモンの一種

	〈バッチ〉
	複数のプログラムからなる作業において、あらかじめ一連の手順を登録しておき、まとめて連続的に実行する方式。または、一定期間や一定量ごとにデータをまとめて一括して処理する方式。

	〈ログ〉
	データの変更や通信履歴を時系列順に書き記したもの。

	〈CSV (Comma Separated Values)〉
	値や項目をカンマで区切って書いたテキストファイル・データのこと

	〈TSV (Tab Separated Values)〉
	値や項目をタブで区切って書いたテキストファイル・データのこと


[プルリクエスト（マージリクエスト）]
	コードの変更をレビュワーに通知し、マージを依頼する機能



■ チケット管理ツール
[asana]
	タスク管理のレイアウトをリスト形式かカンバン形式から、管理の仕方によって選ぶことができる

[Backlog]
	シンプルでわかりやすいUI。メンバー間のコミュニケーション機能やチーム間・組織間でのコラボレーションを助ける機能にも力を入れている。

[Jooto]
	タスクごとにカードを作成し管理していくカンバン方式のツール。ガントチャート機能などタスク管理に強い。

[Readmine]
	ガントチャート機能もあり、チケット周りの機能が充実している

[Trello]
	タスクをカードのように扱うカンバン方式。初期の機能はシンプルだが、必要な機能のみを必要なユーザーが拡張できる



■ バージョン管理
[集中型]
	各クライアントPC内にgit環境が作られ、それぞれコードのバージョン管理が可能


[分散型]
	1台コードを管理するサーバーを構築し、そこでコードのバージョンを管理


[Github]
	Gitの仕組みを利用してデータを保存・公開することができるウェブサービス


[Backlog]


[SourceTree

[Tortoise SVN

[Git Flow]

	〈master〉
	開発のコアとなるメインのブランチ

	〈develop〉
	最新の開発作業をしているブランチ

	〈release〉
	developブランチから作成される分岐のブランチ。デバッグが終わるまでdevelopにmergeすることは許されない。developにmergeされたら、developをmasterにもmergeして安定版を確保する。

		《feature》
		developからブランチを切り、新機能の開発を行うのに用いるサポートブランチ



■ FW／ライブラリ
[FW(Framework)]
	全体の処理の流れが実装されているシステム

	〈Spring Framework〉
	Java言語のWebアプリケーションフレームワーク

	〈Struts〉
	Java Servlet APIを拡張してMVC (Model、View、Controller)アーキテクチャを採用したフレームワーク

	〈JSF（Java Server Faces）〉
	JavaベースのWebアプリケーションフレームワーク


[ライブラリ]
	使いたい部品が入っている道具箱

	〈Bootstrap〉
	Twitter社が開発したCSSのフレームワーク。よく使われるスタイルがあらかじめ定義してある。

	〈Flyway〉
	データベースの状態をバージョン管理できるツール

	〈Jackson〉
	Java用のJSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、逆にJavaオブジェクトをJSON文字列に変換できたりする

	〈jQuery〉
	どんなブラウザでも使えるJavaScriptのライブラリ

	〈Junit〉
	Javaプログラムの単体テストを行うためのツール

	〈Log4j〉
	様々なロギングが可能なJavaプログラム用のログAPI

	〈Lombok〉
	getter, setter, toString, equals などの繰り返し書く必要のあるコードをコンパイル時に自動生成してくれるライブラリ

	〈ORM(Object/Relational Mapping)〉
	オブジェクト指向と関係データベースの考え方を変換して繋いでくれるもの



■ 連絡ツール
[ChatWork]
	タスク管理機能も付いているオフィス向けチャットアプリ

[Slack]

[IP Messenger]
	同一 LAN 環境内に閉じたメッセンジャーのフリーソフト



■ Java
[Javadoc]
	Javaドキュメンテーションコメント

[アノテーション]
	注釈のこと

[メモリ管理]
	〈ヒープ〉
	用途に関係なく自由に確保することができる

	〈GC〉
[GoF
[デザインパターン



■ その他
[オブジェクト指向
[バッチ処理
[コンパイル
[カバレッジ
[プラットホーム